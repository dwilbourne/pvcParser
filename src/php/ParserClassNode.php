<?php
/**
 * @package: pvc
 * @author: Doug Wilbourne (dougwilbourne@gmail.com)
 * @version: 1.0
 */

namespace pvc\parser\php;

use PhpParser\Node\Stmt\Class_;
use PhpParser\NodeTraverser;
use PhpParser\NodeVisitor\NameResolver;
use PhpParser\ParserFactory;
use pvc\err\throwable\exception\stock_rebrands\InvalidArgumentException;
use pvc\err\throwable\exception\stock_rebrands\InvalidArgumentMsg;
use pvc\parser\php\node_visitors\NodeVisitorFirstClass;

/**
 * Parses a file and returns the Class node from the abstract syntax tree generated by the PHP Parser package.
 *
 * Class ParserClassNode
 */
class ParserClassNode
{

    public function parse(string $fileName) : ?Class_
    {
        if (false === ($code = file_get_contents($fileName))) {
            $msg = new InvalidArgumentMsg('valid filename');
            throw new InvalidArgumentException($msg);
        }
        $parser = (new ParserFactory())->create(ParserFactory::PREFER_PHP7);
        $nodes = $parser->parse($code);
        if (empty($nodes)) {
            return null;
        }

        $traverser = new NodeTraverser();
        $nameResolver = new NameResolver();
        $classVisitor = new NodeVisitorFirstClass();
        $traverser->addVisitor($nameResolver);
        $traverser->addVisitor($classVisitor);
        $traverser->traverse($nodes);
        return $classVisitor->getClassNode();
    }
}
